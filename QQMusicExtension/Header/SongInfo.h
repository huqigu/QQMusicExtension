//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Foundation/Foundation.h>

@class AlbumInfo, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSString, SingerInfo;

__attribute__((visibility("hidden")))
@interface SongInfo : NSObject
{
    int song_error;
    NSString *song_url;
    NSString *song_128url;
    int song_Type;
    NSString *song_path;
    int song_DownloadFileRate;
    BOOL isFav;
    double song_firstBufferTime;
    NSString *song_from;
    int song_subid;
    NSString *song_DownLoadFilePath;
    NSString *dbDownLoadFilePath;
    int song_DownloadFileSize;
    NSString *song_WifiURL;
    AlbumInfo *albumInfo;
    SingerInfo *singerInfo;
    BOOL song_HasFingerPrinted;
    double song_Duration;
    BOOL hasCopyright;
    int standardFileSize;
    NSString *song_LyricFilePath;
    NSMutableArray *delegateArray;
    NSString *song_WapLiveURL;
    unsigned long long iFackSongId;
    int topFileSize;
    NSString *song_WapDownLoadURL;
    NSString *song_MiddleLiveURL;
    NSString *song_HighLiveURL;
    NSString *song_TopDownloadURL;
    int faildCount;
    NSString *song_goSoso;
    NSString *highQURL;
    NSString *song_albumMid;
    BOOL _inserted;
    BOOL _isVip;
    BOOL _isPlayingLocalFile;
    int validateStatus;
    unsigned int _controlBits;
    int _song_version;
    int _song_tag;
    int _song_lang;
    int _song_EQid;
    int _song_ErrMsgId;
    int _flacSize;
    int _isExclusive;
    int _aacFileSize24K;
    int _aacFileSize48K;
    int _aacFileSize96K;
    int _aacFileSize192K;
    int _hiResFileSize;
    int _mp3FileSize128K;
    int _mp3FileSize320K;
    int _oggFileSize96K;
    int _oggFileSize192K;
    unsigned long long song_listId;
    unsigned long long album_id;
    unsigned long long singer_id;
    unsigned long long song_id;
    NSString *song_Album;
    NSString *song_singer;
    NSString *song_mediaMid;
    NSString *_song_Name;
    NSArray *_singerList;
    NSString *_song_IPODAssertURL;
    long long _fingerSongId;
    NSString *_song_Mid;
    NSString *_song_Vid;
    NSString *_docid;
    NSString *_kgeSongMid;
    NSString *_recReason;
    unsigned long long _tryBegin;
    unsigned long long _tryEnd;
    NSString *_name_hilight;
    NSString *_album_hilight;
    NSString *_singer_hilight;
    NSData *_bookMark;
    NSDictionary *_volumeDic;
    NSString *_weiyun_file_id;
    NSMutableDictionary *_dicRate2URL;
}

+ (unsigned long long)generateSongIdBySongName:(id)arg1 singerName:(id)arg2 albumName:(id)arg3;
+ (int)getRateByExtName:(id)arg1;
+ (id)convertFromExtPathToQmcExtPath:(id)arg1;
+ (id)getQmcExtNameByRate:(int)arg1;
+ (id)getSongFromWeb:(id)arg1 source:(id)arg2;
+ (id)getSongFromServers:(id)arg1 type:(int)arg2 source:(id)arg3 subid:(int)arg4 ownerUin:(unsigned long long)arg5;
+ (id)translateSongFromJsonDataWithUnifiedFormat:(id)arg1 source:(id)arg2 ownerUin:(unsigned long long)arg3 isMacSongType:(BOOL)arg4;
+ (id)translateSongFromJsonDataWithUnifiedFormat:(id)arg1 source:(id)arg2 ownerUin:(unsigned long long)arg3;
+ (id)translateSongFromJsonDataOfIphoneProtocolData:(id)arg1 source:(id)arg2 ownerUin:(unsigned long long)arg3;
+ (unsigned long long)modifySongID:(unsigned long long)arg1 songType:(int)arg2;
+ (BOOL)isSameRateByRate1:(int)arg1 toRate2:(int)arg2;
+ (long long)compareSongRateType:(int)arg1 to:(int)arg2;
+ (id)get320Mp3UrlFileNameInArray:(id)arg1;
+ (id)getRingBellSongFileNameBy:(int)arg1 mid:(id)arg2 songType:(int)arg3;
+ (id)getSongFileNameBy:(int)arg1 serverType:(int)arg2 mid:(id)arg3;
+ (id)getSongFileNameBy:(int)arg1 mid:(id)arg2 songType:(int)arg3;
+ (int)getLiveWiFiQuality:(int)arg1;
+ (int)getLiveWifiQualityFromRateType:(int)arg1;
+ (int)getLowerQuality:(int)arg1 isListen:(int)arg2;
+ (int)convertESongTypeToSongRateType:(int)arg1;
+ (int)_convertSongRateTypeToESongType:(int)arg1;
+ (int)convertSongRateTypeToESongType:(int)arg1;
+ (int)getURLIndex:(int)arg1;
+ (int)fromWebToSongType:(int)arg1;
+ (int)getRateByDownloadPath:(id)arg1;
+ (id)getQualityNameBySongRate:(int)arg1;
+ (id)getExtNameByRate:(int)arg1;
+ (unsigned int)getBytePerSecond:(int)arg1;
+ (BOOL)isExistLocalFileBySongType:(int)arg1 dbDownLoadFilePath:(id)arg2;
+ (int)songRateTypeByQuality:(int)arg1;
+ (int)convertSongTypeFromIPhone:(int)arg1;
+ (int)convertSongTypeToIPhone:(int)arg1;
+ (int)convertSongTypeFrom:(int)arg1;
+ (int)convertSongTypeToServer:(int)arg1;
+ (long long)getDefaultSwitch:(id)arg1;
+ (long long)getSwitchFromControlbits:(unsigned int)arg1;
+ (id)descripSwitch:(long long)arg1;
+ (BOOL)isActionBitSet:(long long)arg1 forSwitch:(long long)arg2;
+ (BOOL)isSwitchBitSetValided:(long long)arg1;
@property(retain) NSMutableDictionary *dicRate2URL; // @synthesize dicRate2URL=_dicRate2URL;
@property(retain, nonatomic) NSString *weiyun_file_id; // @synthesize weiyun_file_id=_weiyun_file_id;
@property int oggFileSize192K; // @synthesize oggFileSize192K=_oggFileSize192K;
@property int oggFileSize96K; // @synthesize oggFileSize96K=_oggFileSize96K;
@property int mp3FileSize320K; // @synthesize mp3FileSize320K=_mp3FileSize320K;
@property int mp3FileSize128K; // @synthesize mp3FileSize128K=_mp3FileSize128K;
@property int hiResFileSize; // @synthesize hiResFileSize=_hiResFileSize;
@property int aacFileSize192K; // @synthesize aacFileSize192K=_aacFileSize192K;
@property int aacFileSize96K; // @synthesize aacFileSize96K=_aacFileSize96K;
@property int aacFileSize48K; // @synthesize aacFileSize48K=_aacFileSize48K;
@property int aacFileSize24K; // @synthesize aacFileSize24K=_aacFileSize24K;
@property(retain, nonatomic) NSDictionary *volumeDic; // @synthesize volumeDic=_volumeDic;
@property(retain) NSData *bookMark; // @synthesize bookMark=_bookMark;
@property(retain) NSString *singer_hilight; // @synthesize singer_hilight=_singer_hilight;
@property(retain) NSString *album_hilight; // @synthesize album_hilight=_album_hilight;
@property(retain) NSString *name_hilight; // @synthesize name_hilight=_name_hilight;
@property(nonatomic) BOOL isPlayingLocalFile; // @synthesize isPlayingLocalFile=_isPlayingLocalFile;
@property(nonatomic) unsigned long long tryEnd; // @synthesize tryEnd=_tryEnd;
@property(nonatomic) unsigned long long tryBegin; // @synthesize tryBegin=_tryBegin;
@property(retain, nonatomic) NSString *recReason; // @synthesize recReason=_recReason;
@property int isExclusive; // @synthesize isExclusive=_isExclusive;
@property(retain) NSString *kgeSongMid; // @synthesize kgeSongMid=_kgeSongMid;
@property int flacSize; // @synthesize flacSize=_flacSize;
@property int song_ErrMsgId; // @synthesize song_ErrMsgId=_song_ErrMsgId;
@property(retain) NSString *docid; // @synthesize docid=_docid;
@property int song_EQid; // @synthesize song_EQid=_song_EQid;
@property int song_lang; // @synthesize song_lang=_song_lang;
@property int song_tag; // @synthesize song_tag=_song_tag;
@property int song_version; // @synthesize song_version=_song_version;
@property(nonatomic) unsigned int controlBits; // @synthesize controlBits=_controlBits;
@property(retain) NSString *song_Vid; // @synthesize song_Vid=_song_Vid;
@property(retain) NSString *song_Mid; // @synthesize song_Mid=_song_Mid;
@property(nonatomic) long long fingerSongId; // @synthesize fingerSongId=_fingerSongId;
@property(retain) NSString *song_IPODAssertURL; // @synthesize song_IPODAssertURL=_song_IPODAssertURL;
@property(retain) NSArray *singerList; // @synthesize singerList=_singerList;
@property(nonatomic) BOOL isVip; // @synthesize isVip=_isVip;
@property(retain, nonatomic) NSString *song_Name; // @synthesize song_Name=_song_Name;
@property(nonatomic) BOOL inserted; // @synthesize inserted=_inserted;
@property(retain) NSString *highQURL; // @synthesize highQURL;
@property(retain) NSString *song_goSoso; // @synthesize song_goSoso;
@property(nonatomic) BOOL song_HasFingerPrinted; // @synthesize song_HasFingerPrinted;
@property(retain) NSString *song_TopDownloadURL; // @synthesize song_TopDownloadURL;
@property(retain) NSString *song_HighLiveURL; // @synthesize song_HighLiveURL;
@property(retain) NSString *song_MiddleLiveURL; // @synthesize song_MiddleLiveURL;
@property(retain) NSMutableArray *delegateArray; // @synthesize delegateArray;
@property int topFileSize; // @synthesize topFileSize;
@property unsigned long long iFackSongId; // @synthesize iFackSongId;
@property(retain) NSString *song_WapLiveURL; // @synthesize song_WapLiveURL;
@property(retain) NSString *song_LyricFilePath; // @synthesize song_LyricFilePath;
@property int standardFileSize; // @synthesize standardFileSize;
@property(nonatomic) double song_Duration; // @synthesize song_Duration;
@property(retain) NSString *song_WifiURL; // @synthesize song_WifiURL;
@property int validateStatus; // @synthesize validateStatus;
@property(retain) AlbumInfo *albumInfo; // @synthesize albumInfo;
@property(retain) SingerInfo *singerInfo; // @synthesize singerInfo;
@property(retain) NSString *song_albumMid; // @synthesize song_albumMid;
@property(nonatomic) int song_subid; // @synthesize song_subid;
@property(retain, nonatomic) NSString *song_from; // @synthesize song_from;
@property(nonatomic) double song_firstBufferTime; // @synthesize song_firstBufferTime;
@property(nonatomic) BOOL isFav; // @synthesize isFav;
@property int faildCount; // @synthesize faildCount;
@property(nonatomic) int song_DownloadFileRate; // @synthesize song_DownloadFileRate;
@property(retain, nonatomic) NSString *song_path; // @synthesize song_path;
@property(nonatomic) int song_Type; // @synthesize song_Type;
@property(retain, nonatomic) NSString *song_128url; // @synthesize song_128url;
@property(retain, nonatomic) NSString *song_url; // @synthesize song_url;
@property int song_error; // @synthesize song_error;
@property(nonatomic) unsigned long long song_id; // @synthesize song_id;
@property(nonatomic) unsigned long long song_listId; // @synthesize song_listId;
//- (void).cxx_destruct;
- (BOOL)isLocalLinkSong;
- (BOOL)isPlayEnableNowForSong;
- (int)getSongFileSizeByRate:(int)arg1;
- (BOOL)hasDownloadFileForPlayWithRate:(int)arg1 force:(BOOL)arg2;
- (BOOL)_isControlBitsValided;
- (BOOL)isAddToEnable;
- (BOOL)isAddToLoveEnable;
- (id)get320Mp3UrlFileName;
- (id)getSongInfoKey;
- (BOOL)isExistStandardRate;
- (BOOL)isExistFlac;
- (BOOL)isExist320Kmp3;
- (id)_createURLByRate:(int)arg1 forDownload:(BOOL)arg2;
- (id)getURLByRate:(int)arg1;
- (id)getURLByRate:(int)arg1 forDownload:(BOOL)arg2;
- (void)setURL:(id)arg1 byRate:(int)arg2;
- (struct SFlexInteger)isServerEncrypt;
- (id)getFileTitle;
@property(readonly) NSString *song_singer; // @synthesize song_singer;
@property(readonly, nonatomic) NSString *song_Album; // @synthesize song_Album;
@property(readonly, nonatomic) unsigned long long singer_id; // @synthesize singer_id;
@property(readonly, nonatomic) unsigned long long album_id; // @synthesize album_id;
@property(readonly) NSString *song_Singer_Index;
@property(readonly) NSString *song_Album_Index;
- (int)_songRateTypeExisted;
- (int)_songRateTypeCapacity;
- (BOOL)shouldPlayWeiyunLinkFirst;
- (BOOL)isWeiYunThirdSong;
- (BOOL)isWeiYunSong;
- (BOOL)isImportSong;
- (BOOL)isGososoSong;
- (BOOL)isSosoSong;
- (BOOL)_isQQSongWithoutCopyrightAndUrl;
- (BOOL)isAutoSaveEnable;
- (BOOL)isPlayOrDownloadNeedVkey;
- (BOOL)isSongTypeFromLowQuality;
- (BOOL)isQQSongAll;
@property BOOL hasCopyright; // @synthesize hasCopyright;
@property(readonly) __weak NSString *song_ErrMsg;
- (id)fixSong_DownLoadFilePath:(id)arg1;
- (int)song_DownloadFileRate_downloadAll;
- (int)getSongRateTypeByQuality:(unsigned long long)arg1;
@property int song_DownloadFileSize; // @synthesize song_DownloadFileSize;
@property(retain) NSString *song_DownLoadFilePath; // @synthesize song_DownLoadFilePath;
- (BOOL)songDownloadFilePathInIMusic;
- (BOOL)songDownloadFilePathInDownloadedDirOrQmcDir;
@property(retain) NSString *dbDownLoadFilePath; // @synthesize dbDownLoadFilePath;
@property(retain) NSString *song_mediaMid; // @synthesize song_mediaMid;
- (BOOL)isExist192OGG;
- (BOOL)isHQSongConfigured;
- (id)getSongUrlForDownloadedFile;
- (void)delayFreshData;
- (void)deleteAllMaybeFiles;
- (id)allMayBeFiles;
- (BOOL)isDownloadOk;
- (BOOL)isInDownloadedList;
- (BOOL)isIPodSong;
- (BOOL)song_DownLoadFilePath_isQMC;
- (id)getCacheFilePathBySongRate:(int)arg1 disablePath:(id)arg2;
- (id)filePathToPlay;
- (int)downloadFileStatus;
- (BOOL)isDownloadedFileVIPDownloadSong;
- (struct SFlexInteger)isVIPDownloadSong;
- (BOOL)isExistLocalFile;
- (int)getSongDownloadFileRate;
- (struct SFlexInteger)canPlayLocalQMCFile;
- (struct SFlexInteger)isExistPlayableLocalFile;
- (struct SFlexInteger)IsImportSongOrDownloadSong;
- (struct SFlexInteger)isExistPlayableLocalFileAndIsImportSongOrDownloadSong;
- (BOOL)isEmptySongUrl;
- (id)description;
- (id)initWithSongType:(int)arg1 songID:(unsigned long long)arg2;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)isPlayUIGrayByServer;
- (struct SFlexInteger)isServerGraySong;
- (long long)payIcoStatusOfInfo;
- (struct SFlexInteger)isLimitedFree;
- (void)setLimitedFree:(struct SFlexInteger)arg1;
- (struct SFlexInteger)haveDownloadHistory;
- (void)setDownloadedHistory:(struct SFlexInteger)arg1;
- (void)setPaidedStatus:(struct SFlexInteger)arg1;
- (struct SFlexInteger)isPaidContent;
- (struct SFlexInteger)isEnableDownloadHigherThanDownloaded;
- (struct SFlexInteger)isEnableLookAlbum;
- (struct SFlexInteger)isEnableLookSinger;
- (struct SFlexInteger)isGrayDownloadButton;
- (struct SFlexInteger)havePaiedListen;
- (struct SFlexInteger)havePaiedDownload;
- (struct SFlexInteger)payTrackPrice;
- (id)titleForActionSheet;
- (struct SFlexInteger)icons;
- (struct SFlexInteger)paidAlertID;
- (struct SFlexInteger)isPayPlay;
- (unsigned long long)songPayStatus;
- (unsigned int)song_PayTrackMonth;
- (unsigned int)song_PayAlbumPrice;
- (struct SFlexInteger)isPayDownload;
- (struct SFlexInteger)isEnablePlay;
- (struct SFlexInteger)onlyListenPart;
- (struct SFlexInteger)songListenRight;
- (struct SFlexInteger)isChorusNormalSong;
- (struct SFlexInteger)isEnableGive;
- (struct SFlexInteger)isEnableTryListen;
- (struct SFlexInteger)isEnableDownloadSuperQuality;
- (struct SFlexInteger)isEnableDownloadHighQuality;
- (struct SFlexInteger)isEnableDownloadLowQuality;
- (struct SFlexInteger)isEnableDownloadByQuality:(unsigned long long)arg1;
- (struct SFlexInteger)isEnableDownload;
- (struct SFlexInteger)isEnableVipDownloadByQuality:(unsigned long long)arg1;
- (struct SFlexInteger)isEnableVipDownloadSuperQuality;
- (struct SFlexInteger)isEnableVipDownloadHighQuality;
- (struct SFlexInteger)isEnableVipDownloadLowQuality;
- (struct SFlexInteger)isEnableDownloadOrVipDownload;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadSuperQuality;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadHighQuality;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadLowQuality;
- (struct SFlexInteger)isEnablePlaySuperQuality;
- (struct SFlexInteger)isEnablePlayHighQuality;
- (BOOL)IsShowVIPICon;
- (struct SFlexInteger)isEnablePlayLowQuality;
- (struct SFlexInteger)isEnableCreateRadio;
- (BOOL)isShouldShowSosoIcon;
- (struct SFlexInteger)isEnableShare;
- (struct SFlexInteger)isEnableSetBackGroundSong;
- (struct SFlexInteger)isEnableAddTo;
- (struct SFlexInteger)isEnableAddToLove;
- (long long)getSwitch;
- (BOOL)isActionBitSet:(long long)arg1 forSwitch:(long long)arg2;
- (BOOL)isSwitchBitSetValided:(long long)arg1;
- (struct SFlexInteger)maxEnableDownloadOrVipDownloadRate;
- (struct SFlexInteger)maxEnablePlayRate;
- (struct SongInfoExt)getSongInfoExt;

@end

